{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","use","enable","exposedHeaders","config","corsHeaders","bodyParser","json","limit","bodyLimit","get","req","res","send","next","removeHeader","header","listen","process","env","PORT","port","console","log","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;AACAA,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAJ,IAAIK,MAAJ,CAAW,MAAX;;AAEA;AACAL,IAAII,GAAJ,CAAQ,oBAAK;AACZE,iBAAgBC,iBAAOC;AADX,CAAL,CAAR;;AAIAR,IAAII,GAAJ,CAAQK,qBAAWC,IAAX,CAAgB;AACvBC,QAAQJ,iBAAOK;AADQ,CAAhB,CAAR;;AAIAZ,IAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN;AAAA,QAAcA,IAAIC,IAAJ,CAAS,wBAAT,CAAd;AAAA,CAAb;;AAEAhB,IAAII,GAAJ,CAAQ,MAAR,EAAgB,mBAAI,EAAEG,wBAAF,EAAJ,CAAhB;;AAEAP,IAAII,GAAJ,CAAQ,UAACU,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;AAC3BF,KAAIG,YAAJ,CAAiB,cAAjB;AACAH,KAAII,MAAJ,CAAW,eAAX,EAA4B,8CAA5B;AACEJ,KAAII,MAAJ,CAAW,SAAX,EAAsB,IAAtB;AACAJ,KAAII,MAAJ,CAAW,QAAX,EAAqB,UAArB;AACAF;AACF,CAND;;AAQAjB,IAAIC,MAAJ,CAAWmB,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBhB,iBAAOiB,IAA7C,EAAmD,YAAM;AACxDC,SAAQC,GAAR,qCAA8C1B,IAAIC,MAAJ,CAAW0B,OAAX,GAAqBH,IAAnE;AACA,CAFD;;kBAIexB,G","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport cors from 'cors';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport api from './api';\nimport config from './config.json';\n\nlet app = express();\napp.server = http.createServer(app);\n\n// logger\napp.use(morgan('dev'));\n\napp.enable('etag');\n\n// 3rd party middleware\napp.use(cors({\n\texposedHeaders: config.corsHeaders\n}));\n\napp.use(bodyParser.json({\n\tlimit : config.bodyLimit\n}));\n\napp.get('/', (req, res) => res.send('Citibox server working') )\n\napp.use('/api', api({ config }));\n\napp.use((req, res, next) => {\n\tres.removeHeader(\"X-Powered-By\");\n\tres.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n  \tres.header('Expires', '-1');\n  \tres.header('Pragma', 'no-cache');\n  \tnext();\n})\n\napp.server.listen(process.env.PORT || config.port, () => {\n\tconsole.log(`Citibox server started on port ${app.server.address().port}`);\n});\n\nexport default app;\n"]}